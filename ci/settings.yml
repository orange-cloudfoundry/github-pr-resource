---
meta:
  name:    github-pr-resource
  release: GitHub Pull-Request Concourse resource
  target:  gk-plat-devs
  url:     https://ci.gstack.io

  initial_version: "0.24.0"

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  image:
    name: (( concat meta.private-registry.host "/gstack/gk-ops" ))
    registry:
      username: (( grab meta.private-registry.username ))
      password: (( grab meta.private-registry.password ))

  dockerhub:
    username:   ((dockerhub-username))
    password:   ((dockerhub-password))
    org:        cfcommunity
    repository: (( concat meta.dockerhub.org "/" meta.name ))
    short_desc:
      Concourse CI resource for working with Pull-Requests on GitHub

  private-registry:
    host:       harbor.ci.gstack.io
    username:   ((private-registry-username))
    password:   ((private-registry-password))
    repository: (( concat meta.private-registry.host "/" meta.dockerhub.org "/" meta.name ))

  aws:
    bucket:      (( grab meta.pipeline ))
    region_name: eu-west-3
    access_key:  ((aws-access-key))
    secret_key:  ((aws-secret-key))

  github:
    owner:          cloudfoundry-community
    repo:           github-pr-resource
    branch:         main
    pr_base_branch: main
    release_branch: main
    private_key:    ((github-private-key))
    access_token:   ((github-access-token))

  slack:
    webhook:       ((slack-webhook))
    username:      ((slack-username))
    icon:          ((slack-icon-url))
    channel:       "#oss-pipelines-notifications"

groups:
  - name: bump
    jobs:
      - bump-deps

jobs:
  - name: build
    plan:
      - (( inline ))
      - in_parallel:
          - (( append ))
          - { get: golang-latest, passed: [ bump-deps ], trigger: true, params: { format: oci } }
          - { get: alpine-latest, passed: [ bump-deps ], trigger: true, params: { format: oci } }

      - # task: build-docker-image
        config:
          inputs:
            - (( append ))
            - name: golang-latest
            - name: alpine-latest
        params:
          IMAGE_ARG_golang: golang-latest/image.tar
          IMAGE_ARG_alpine: alpine-latest/image.tar

  - name: build-pr
    plan:
      - (( inline ))
      - in_parallel:
          - (( append ))
          - { get: golang-latest, passed: [ bump-deps ], trigger: true, params: { format: oci } }
          - { get: alpine-latest, passed: [ bump-deps ], trigger: true, params: { format: oci } }

      - {} # put: git-pull-requests

      - # task: build-docker-image
        config:
          inputs:
            - (( replace ))
            - name: git-pull-requests
            - name: golang-latest
            - name: alpine-latest
        params:
          CONTEXT:          git-pull-requests
          IMAGE_ARG_golang: golang-latest/image.tar
          IMAGE_ARG_alpine: alpine-latest/image.tar

  - name: promote
    plan:
      - (( insert after 1 )) # insert after “task: release”
      - task: append-usage
        image: image
        config:
          platform: linux
          inputs:  [ name: gh, name: version ]
          outputs: [ name: gh ]
          run:
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail
                cat >> gh/notes.md <<EOF

                ### Usage

                \`\`\`yaml
                resource_types:
                  - name: pull-request
                    type: registry-image
                    source:
                      repository: ${DOCKERHUB_REPOSITORY}
                      tag:        "$(< version/number)"
                \`\`\`
                EOF
        params:
          DOCKERHUB_REPOSITORY: (( concat meta.dockerhub.org "/" meta.name ))

  - name: bump-deps
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: weekly, trigger: true }
          - { get: git }
          - { get: gk-automation }
          - { get: golang-runner, resource: golang-latest } # format: rootfs
          - { get: golang-latest, params: { format: oci } }
          - { get: alpine-latest, params: { format: oci } }
          - { get: image }
          - { get: docker-image-build-task }

      - task: bump-golang-deps
        image: golang-runner
        config:
          platform: linux
          inputs:  [ { name: git, path: repo } ]
          caches:  [ path: /go ]
          outputs:
            - name: repo-bumped
            - name: golang-info
          run:
            path: sh
            args:
            - -ec
            - |
              find "repo" -mindepth 1 -maxdepth 1 -print0 \
                  | xargs -0 -I{} cp -a {} "repo-bumped"
              cd "repo-bumped" || exit 115

              awk '/^toolchain /{sub(/go/,"",$2); print $2}' go.mod \
                  > ../golang-info/previous-version

              (
                  set -x
                  toolchain_version=$(go version | awk '{print $3}')
                  go_version=${toolchain_version#"go"}
                  inferred_go_min_version="${go_version%.*}.0"
                  sed -i -Ee "s/^go [[:digit:].]+\$/go ${inferred_go_min_version}/" go.mod
                  sed -i -Ee "s/^toolchain go[[:digit:].]+\$/toolchain ${toolchain_version}/" go.mod
                  go get -t -u ./...
                  go mod tidy

                  echo "${toolchain_version}"       > ../golang-info/toolchain-version
                  echo "${go_version}"              > ../golang-info/version
                  echo "${inferred_go_min_version}" > ../golang-info/min-version
              )

      - task: build-docker-image
        image: docker-image-build-task
        privileged: true
        config:
          platform: linux
          inputs:
            - { name: repo-bumped, path: "." }
            - { name: golang-latest }
            - { name: alpine-latest }
          outputs: [ name: image ]
          caches:  [ path: cache ]
          run:     { path: build }
          params:
            DEBUG: true
            IMAGE_ARG_golang: golang-latest/image.tar
            IMAGE_ARG_alpine: alpine-latest/image.tar
        output_mapping:
          # Notice: this ensures the built image does not overwrite the
          # general-purpose runner image that we already have in this build
          # plan inside the 'image' artifact
          image: built-image

      - task: generate-messages
        image: image
        config:
          platform: linux
          inputs:  [ name: golang-info ]
          outputs: [ name: messages ]
          run:
            path: bash
            args:
            - -c
            - |
              set -ueo pipefail
              go_prev_ver=$(< golang-info/previous-version)
              go_curr_ver=$(< golang-info/version)

              version_details="${go_curr_ver}"
              if [[ ${go_curr_ver} != ${go_prev_ver} ]]; then
                  version_details="from ${go_prev_ver} to ${go_curr_ver} and its"
              fi
              echo "Update Golang ${version_details} dependencies" \
                  > messages/commit-message

              echo "${PIPELINE_NAME}: successfully bumped Golang ${version_details} dependencies," \
                "with passing tests! :tada:" \
                "<${PIPELINE_URL}|Ship it when ready!> ${SUCCESS_MOJI}" \
                > messages/notif-body
          params:
            SUCCESS_MOJI:  (( grab meta.slack.success_moji ))
            PIPELINE_URL:  (( grab meta.slack.pipeline_url ))
            PIPELINE_NAME: (( grab meta.pipeline ))

      - task: git-commit
        image: image
        file: gk-automation/tasks/git/commit.yml
        input_mapping:
          repo:        repo-bumped
          commit-info: messages
        params:
          GIT_COMMIT_NAME:    (( grab meta.git.name ))
          GIT_COMMIT_EMAIL:   (( grab meta.git.email ))
          GIT_DIFF_OPTS:      --color-words

      - put: git
        params:
          repository: repo-committed
          rebase:     true

    on_failure:
      put: notify
      no_get: true
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))
    on_success:
      put: notify
      no_get: true
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text_file: messages/notif-body

resources:

  - name: git
    check_every: 24h
    webhook_token: ((gk-concourse-webhook-token))

  - name: git-pull-requests
    check_every: 24h
    webhook_token: ((gk-concourse-webhook-token))

  - name: edge
    source:
      username:   (( grab meta.private-registry.username ))
      password:   (( grab meta.private-registry.password ))
      repository: (( grab meta.private-registry.repository ))

  - name: latest
    source:
      username:   (( grab meta.private-registry.username ))
      password:   (( grab meta.private-registry.password ))
      repository: (( grab meta.private-registry.repository ))

  - name: version
    icon: github
    source:
      bucket:            (( prune ))
      region_name:       (( prune ))
      key:               (( prune ))
      access_key_id:     (( prune ))
      secret_access_key: (( prune ))
      driver:      git
      uri:         git@github.com:gstackio/gk-pipelines-compass.git
      branch:      master
      file:        (( concat "versions/" meta.pipeline ))
      private_key: ((github-private-key))
      git_user:    "((git-commit-name)) <((git-commit-email))>"

  - name: golang-latest
    type: registry-image
    icon: docker
    check_every: 24h
    source:
      repository:        golang
      semver_constraint: "< 1970" # Avoid YYYYMMDD tags like '20231219'

  - name: alpine-latest
    type: registry-image
    icon: docker
    check_every: 24h
    source:
      repository:        alpine
      semver_constraint: "< 1970" # Avoid YYYYMMDD tags like '20231219'

  - name: gk-automation
    type: git
    icon: github
    check_every: 24h
    source:
      uri:         git@github.com:gstackio/gk-automation.git
      branch:      master
      private_key: (( grab meta.github.private_key ))

  - name: weekly
    type: time
    icon: alarm
    source:
      location: Europe/Paris
      start:    "3:00"
      stop:     "4:30"
      days:     [ Saturday ]
